generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id                       String       @id @default(cuid())
  email                    String       @unique
  emailVerified            DateTime?
  name                     String?
  image                    String?
  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt
  evernoteToken            String?
  evernoteUserId           String?
  evernoteNoteStoreUrl     String?
  evernotePublishedTagGuid String?
  evernoteAccountId        String?
  displayName              String?
  domain                   String?      @unique
  isActive                 Boolean      @default(true)
  role                     UserRole     @default(USER)
  slug                     String?      @unique
  subdomain                String?      @unique
  useSubdomain             Boolean      @default(false)
  ghostApiUrl              String?
  ghostApiToken            String?
  accounts                 Account[]
  blogs                    Blog[]
  domains                  Domain[]
  ghostTokens              GhostToken[]
  adminApiKeys             AdminApiKey[]
  sessions                 Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Blog {
  id                  String          @id @default(cuid())
  userId              String
  title               String
  description         String?
  slug                String
  customDomain        String?         @unique
  evernoteNotebook    String?
  evernoteNotebookName String?
  evernoteWebhookId   String?
  theme               String          @default("default")
  isPublic            Boolean         @default(true)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  lastSyncedAt        DateTime?
  lastSyncAttemptAt   DateTime?
  lastSyncUpdateCount Int?
  author              String?
  subdomain           String?
  urlFormat           String          @default("path")
  contentSources      ContentSource[] @default([EVERNOTE])
  ghostLastSyncedAt   DateTime?
  ghostSiteUrl        String?
  ghostApiToken       String?
  showCameraMake      Boolean         @default(false)
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  domain              Domain?
  ghostTokens         GhostToken[]
  adminApiKeys        AdminApiKey[]
  posts               Post[]
  tags                Tag[]

  @@unique([userId, slug])
  @@map("blogs")
}

model Post {
  id              String        @id @default(cuid())
  blogId          String
  evernoteNoteId  String?       @unique
  title           String
  content         String
  excerpt         String?
  slug            String
  isPublished     Boolean       @default(false)
  publishedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  contentSource   ContentSource @default(EVERNOTE)
  contentFormat   ContentFormat @default(HTML)
  ghostPostId     String?
  sourceUpdatedAt DateTime?
  sourceUrl       String?
  blog                Blog                    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  postTags            PostTag[]
  imageNamingDecisions ImageNamingDecision[]

  @@unique([blogId, slug])
  @@map("posts")
}

model Tag {
  id          String    @id @default(cuid())
  blogId      String
  name        String
  slug        String
  description String?
  visibility  String    @default("public")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  blog        Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  postTags    PostTag[]

  @@unique([blogId, slug])
  @@map("tags")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}


model Domain {
  id         String     @id @default(cuid())
  domain     String     @unique
  blogId     String?    @unique
  userId     String?
  type       DomainType @default(CUSTOM)
  isVerified Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  blog       Blog?      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("domains")
}

model GhostToken {
  id        String   @id @default(cuid())
  token     String   @unique
  blogId    String
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ghost_tokens")
}

model AdminApiKey {
  id          String   @id @default(cuid())
  keyId       String   @unique
  secret      String
  blogId      String
  userId      String
  name        String   @default("Admin API Key")
  description String?
  createdAt   DateTime @default(now())
  lastUsedAt  DateTime?
  blog        Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_api_keys")
}

model ImageNamingDecision {
  id               String                @id @default(cuid())
  postId           String?
  originalHash     String                @unique
  blobFilename     String
  blobUrl          String
  namingSource     NamingDecisionSource
  originalTitle    String?
  extractedDate    String?
  exifMetadata     Json?
  originalFilename String?
  decisionReason   String?
  prefixCompressed Boolean?              @default(false)
  originalCamera   String?
  originalLens     String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  post             Post?                 @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([blobFilename])
  @@index([prefixCompressed])
  @@map("image_naming_decisions")
}

enum UserRole {
  USER
  ADMIN
}

enum DomainType {
  CUSTOM
  SUBDOMAIN
}

enum ContentSource {
  EVERNOTE
  GHOST
}

enum ContentFormat {
  HTML
  MARKDOWN
}

enum NamingDecisionSource {
  TITLE
  EXIF_DATE
  POST_DATE
  CONTENT_HASH
  ORIGINAL_FILENAME
}
