generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model User {
  id                     String    @id @default(cuid())
  email                  String    @unique
  emailVerified          DateTime?
  name                   String?
  image                  String?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  evernoteToken          String?
  evernoteUserId         String?
  evernoteNoteStoreUrl   String?
  evernotePublishedTagGuid String?  // Cached GUID for "published" tag
  evernoteAccountId      String?   // Track which Evernote account the cache is for
  
  // Tenant properties merged into User
  slug                   String?   @unique  // URL slug for user's blog space
  subdomain              String?   @unique  // Subdomain like user.from.cafe
  domain                 String?   @unique  // Custom domain
  displayName            String?             // Public display name for blog space
  useSubdomain           Boolean   @default(false) // Whether to use subdomain URLs for View Blog links
  isActive               Boolean   @default(true)
  
  // Admin role
  role                   UserRole  @default(USER)
  
  accounts               Account[]
  blogs                  Blog[]
  sessions               Session[]
  domains                Domain[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Blog {
  id                  String    @id @default(cuid())
  userId              String
  title               String
  description         String?
  slug                String    
  author              String?   // Author name for byline, defaults to user name
  customDomain        String?   @unique
  subdomain           String?   // Subdomain for this blog (e.g., tech.from.cafe)
  urlFormat           String    @default("path") // "path", "subdomain", or "custom"
  evernoteNotebook    String?
  evernoteWebhookId   String?
  theme               String    @default("default")
  isPublic            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastSyncedAt        DateTime?
  lastSyncAttemptAt   DateTime?
  lastSyncUpdateCount Int?
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  domain              Domain?
  posts               Post[]

  @@unique([userId, slug])
  @@map("blogs")
}

model Post {
  id             String    @id @default(cuid())
  blogId         String
  evernoteNoteId String    @unique
  title          String
  content        String
  excerpt        String?
  slug           String
  isPublished    Boolean   @default(false)
  publishedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  blog           Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([blogId, slug])
  @@map("posts")
}

model Domain {
  id         String     @id @default(cuid())
  domain     String     @unique
  blogId     String?    @unique
  userId     String?    
  type       DomainType @default(CUSTOM)
  isVerified Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  blog       Blog?      @relation(fields: [blogId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("domains")
}

enum DomainType {
  CUSTOM
  SUBDOMAIN
}
