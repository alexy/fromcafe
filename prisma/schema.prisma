generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  emailVerified        DateTime?
  name                 String?
  image                String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  evernoteToken        String?
  evernoteUserId       String?
  evernoteNoteStoreUrl String?
  accounts             Account[]
  blogs                Blog[]
  sessions             Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Blog {
  id                  String    @id @default(cuid())
  userId              String
  title               String
  description         String?
  slug                String    @unique
  customDomain        String?   @unique
  evernoteNotebook    String?
  evernoteWebhookId   String?
  theme               String    @default("default")
  isPublic            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastSyncedAt        DateTime?
  lastSyncAttemptAt   DateTime?
  lastSyncUpdateCount Int?
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  domain              Domain?
  posts               Post[]

  @@map("blogs")
}

model Post {
  id             String    @id @default(cuid())
  blogId         String
  evernoteNoteId String    @unique
  title          String
  content        String
  excerpt        String?
  slug           String
  isPublished    Boolean   @default(false)
  publishedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  blog           Blog      @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([blogId, slug])
  @@map("posts")
}

model Domain {
  id         String   @id @default(cuid())
  domain     String   @unique
  blogId     String   @unique
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  blog       Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@map("domains")
}
