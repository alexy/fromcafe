// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // OAuth accounts
  accounts      Account[]
  sessions      Session[]
  
  // Evernote integration
  evernoteToken String?
  evernoteUserId String?
  
  // User's blogs
  blogs         Blog[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Blog {
  id              String   @id @default(cuid())
  userId          String
  title           String
  description     String?
  slug            String   @unique
  customDomain    String?  @unique
  evernoteNotebook String?
  theme           String   @default("default")
  isPublic        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts           Post[]
  domain          Domain?
  
  @@map("blogs")
}

model Post {
  id              String   @id @default(cuid())
  blogId          String
  evernoteNoteId  String   @unique
  title           String
  content         String   @db.Text
  excerpt         String?
  slug            String
  isPublished     Boolean  @default(false)
  publishedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  blog            Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  
  @@unique([blogId, slug])
  @@map("posts")
}

model Domain {
  id          String   @id @default(cuid())
  domain      String   @unique
  blogId      String   @unique
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  blog        Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  
  @@map("domains")
}
